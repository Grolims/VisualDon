"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _Bar = _interopRequireDefault(require("./Bar"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var classes = {
  barChart: {
    width: "100%",
    position: "relative"
  },
  container: {
    width: "100%"
  }
};

var BarChart =
/*#__PURE__*/
function (_React$Component) {
  _inherits(BarChart, _React$Component);

  function BarChart(props) {
    var _this;

    _classCallCheck(this, BarChart);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(BarChart).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "componentDidMount", function () {
      if (_this.props.start) {
        var intervalId = setInterval(_this.update, _this.props.timeout + _this.props.delay);

        _this.setState({
          intervalId: intervalId
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "componentWillUnmount", function () {
      clearInterval(_this.state.intervalId);
    });

    _defineProperty(_assertThisInitialized(_this), "update", function () {
      if (_this.state.idx + 1 === _this.props.timeline.length) {
        clearInterval(_this.state.intervalId);
        return;
      }

      _this.setState(function (prevState) {
        var _this$sortAxis = _this.sortAxis(prevState.idx + 1),
            _this$sortAxis2 = _slicedToArray(_this$sortAxis, 2),
            currRank = _this$sortAxis2[0],
            maxVal = _this$sortAxis2[1];

        return {
          idx: prevState.idx + 1,
          prevRank: prevState.currRank,
          currRank: currRank,
          maxVal: maxVal
        };
      });
    });

    _defineProperty(_assertThisInitialized(_this), "sortAxis", function (i, descending) {
      if (descending === undefined) descending = true;
      var toSort = Object.keys(_this.props.data).map(function (name) {
        return {
          name: name,
          val: _this.props.data[name][i]
        };
      });
      toSort.sort(function (left, right) {
        return descending ? left.val < right.val : left.val > right.val;
      });
      toSort = toSort.slice(0, _this.maxItems);
      var maxVal = Math.max.apply(Math, toSort.map(function (item) {
        return item.val;
      }));
      return [toSort.reduce(function (ret, item, idx) {
        return _objectSpread({}, ret, {}, _defineProperty({}, item.name, idx));
      }, {}), maxVal];
    });

    _defineProperty(_assertThisInitialized(_this), "getInfoFromRank", function (name) {
      var currIdx = _this.state.idx;
      var prevIdx = currIdx > 0 ? currIdx - 1 : 0;
      var value = _this.props.data[name][currIdx];
      var hidden = _this.state.currRank[name] === undefined;

      var currStyle = _objectSpread({}, _this.props.barStyle, {
        marginTop: "calc(".concat(_this.state.currRank[name], " * ").concat(_this.barHeight, ")"),
        width: "".concat(100 * _this.props.data[name][currIdx] / _this.state.maxVal, "%"),
        backgroundColor: _this.props.colors[name]
      });

      var prevStyle = _objectSpread({}, _this.props.barStyle, {
        marginTop: "calc(".concat(_this.state.prevRank[name], " * ").concat(_this.barHeight, ")"),
        width: "".concat(100 * _this.props.data[name][prevIdx] / _this.state.maxVal, "%"),
        backgroundColor: _this.props.colors[name]
      });

      return [value, hidden, currStyle, prevStyle];
    });

    _this.barHeight = "calc(".concat(props.barStyle.height, " + ").concat(props.barStyle.marginTop, ")");
    _this.nItmes = Object.keys(_this.props.data).length;
    _this.maxItems = props.maxItems <= _this.nItmes ? props.maxItems : _this.nItmes;
    _this.barChartStyle = {
      height: "calc(".concat(_this.maxItems, " * ").concat(_this.barHeight, ")")
    };

    var _this$sortAxis3 = _this.sortAxis(0),
        _this$sortAxis4 = _slicedToArray(_this$sortAxis3, 2),
        initRank = _this$sortAxis4[0],
        _maxVal = _this$sortAxis4[1];

    _this.state = {
      idx: 0,
      prevRank: initRank,
      currRank: initRank,
      maxVal: _maxVal,
      started: props.start
    };
    return _this;
  }

  _createClass(BarChart, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.start) {
        var intervalId = setInterval(this.update, this.props.timeout + this.props.delay);
        this.setState({
          intervalId: intervalId
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return _react["default"].createElement("div", {
        style: classes.container
      }, _react["default"].createElement("div", {
        style: this.props.timelineStyle
      }, this.props.timeline[this.state.idx]), _react["default"].createElement("div", {
        style: _objectSpread({}, classes.barChart, {}, this.barChartStyle)
      }, Object.keys(this.props.data).map(function (name) {
        var _this2$getInfoFromRan = _this2.getInfoFromRank(name),
            _this2$getInfoFromRan2 = _slicedToArray(_this2$getInfoFromRan, 4),
            value = _this2$getInfoFromRan2[0],
            hidden = _this2$getInfoFromRan2[1],
            currStyle = _this2$getInfoFromRan2[2],
            prevStyle = _this2$getInfoFromRan2[3];

        if (hidden) return _react["default"].createElement("div", {
          key: name
        });
        return _react["default"].createElement(_Bar["default"], {
          name: name,
          value: value,
          label: _this2.props.labels[name],
          currStyle: currStyle,
          prevStyle: prevStyle,
          key: name,
          timeout: _this2.props.timeout,
          textBoxStyle: _this2.props.textBoxStyle,
          width: _this2.props.width
        });
      })));
    }
  }]);

  return BarChart;
}(_react["default"].Component);

var _default = BarChart;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,